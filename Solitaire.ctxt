#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment0.text=\r\n\ Main\ method;\ creates\ a\ new\ Solitaire\ object.\r\n\ @param\ args\ an\ argument\r\n\ @postcondition\ a\ Solitaire\ object\ is\ created.\r\n
comment1.params=
comment1.target=Solitaire()
comment1.text=\r\n\ Default\ constructor;\ initializes\ instance\ variables.\r\n
comment10.params=
comment10.target=void\ stockClicked()
comment10.text=\r\n\ Called\ when\ the\ stock\ is\ clicked,\ performs\ one\ of\ various\r\n\ actions\ depending\ on\ state\ of\ game.\r\n\ @postcondition\ nothing\ happens\ if\ the\ waste\ is\ selcted\ or\ a\ pile\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ is\ selected,\ three\ cards\ are\ dealt\ if\ the\ stock\ isn't\ empty,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ otherwise\ the\ stock\ is\ reset.\r\n
comment11.params=
comment11.target=void\ wasteClicked()
comment11.text=\r\n\ Called\ when\ the\ waste\ is\ clicked,\ performs\ one\ of\ various\r\n\ actions\ depending\ on\ state\ of\ game.\r\n\ @postcondition\ the\ waste\ is\ selected\ if\ the\ waste\ isn't\ empty\ and\ the\ waste\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ isn't\ selected\ and\ a\ pile\ isn't\ selected,\ otherwise\ if\ the\ waste\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ is\ selected\ it\ is\ unselected.\r\n
comment12.params=index
comment12.target=void\ foundationClicked(int)
comment12.text=\r\n\ Called\ when\ the\ foundation\ is\ clicked,\ performs\ one\ of\ various\ \r\n\ actions\ depending\ on\ state\ of\ game.\r\n\ @param\ index\ an\ index\ into\ the\ foundations\ array\r\n\ @precondition\ the\ index\ is\ valid\ (between\ 0\ and\ 6\ inclusive)\r\n\ @postcondition\ a\ card\ popped\ from\ the\ waste\ is\ pushed\ to\ the\ foundations\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ at\ the\ given\ index\ if\ the\ waste\ is\ selected\ and\ the\ card\ on\ top\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ the\ waste\ can\ be\ added\ at\ the\ given\ index,\ otherwise\ if\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ a\ pile\ is\ selected\ and\ the\ top\ card\ of\ the\ selected\ pile\ is\ able\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ to\ be\ added\ to\ the\ foundation\ at\ the\ given\ index,\ the\ pile\ at\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ selectedPile\ index\ is\ popped\ and\ that\ card\ is\ pushed\ to\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ foundations\ at\ the\ given\ index.\r\n
comment13.params=
comment13.target=boolean\ celebrateTime()
comment13.text=\r\n\ Tells\ whether\ the\ game\ has\ been\ won\ or\ not\ -\ used\ to\r\n\ implement\ the\ win\ animation.\r\n\ @postcondition\ true\ is\ returned\ if\ the\ game\ has\ been\ won,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ false\ otherwise.\r\n\ @return\ true\ if\ the\ game\ has\ been\ won,\ false\ otherwise.\r\n
comment14.params=index
comment14.target=void\ pileClicked(int)
comment14.text=\r\n\ Called\ when\ the\ pile\ is\ clicked,\ performs\ one\ of\ various\ \r\n\ actions\ depending\ on\ state\ of\ game.\r\n\ @param\ index\ an\ index\ into\ the\ piles\ array\r\n\ @precondition\ the\ index\ is\ valid\ (between\ 0\ and\ 6\ inclusive)\r\n\ @postcondition\ if\ a\ pile\ is\ selected\ and\ the\ given\ index\ doesnt\ match\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ that\ pile,\ then\ the\ face\ up\ cards\ on\ the\ selected\ pile\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ are\ extracted\ to\ a\ stack.\ If\ the\ top\ card\ on\ the\ stack\ can\ be\ added\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ safely\ to\ the\ pile\ at\ the\ given\ index,\ then\ it\ is\ added\ and\ the\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ old\ pile\ is\ unselected.\ Otherwise,\ if\ the\ waste\ is\ seleted,\ the\ top\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ card\ of\ the\ waste\ is\ extracted\ into\ a\ card.\ If\ the\ card\ can\ be\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ safely\ added\ to\ the\ pile\ with\ the\ given\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index,\ then\ it\ is\ added\ and\ the\ old\ pile\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ is\ unselected.\ Otherwise\ if\ the\ waste\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ isn't\ selected\ and\ a\ pile\ isn't\ selected\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ and\ the\ pile\ at\ the\ given\ index\ is\ not\ empty\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ and\ the\ card\ at\ the\ top\ of\ the\ pile\ with\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ given\ index\ is\ face\ up,\ then\ the\ pile\ at\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ given\ index\ is\ selcted.\ Otherwise\ if\ the\ selectedPile\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ matches\ the\ given\ index,\ it\ is\ unselected.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Otherwise,\ if\ the\ waste\ isn't\ selected\ and\ a\ pile\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ isn't\ selected\ and\ the\ pile\ at\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ given\ index\ is\ not\ empty\ and\ the\ top\ card\ of\ the\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ pile\ at\ the\ given\ index\ is\ face\ down,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ top\ card\ of\ the\ pile\ with\ the\ given\ index\ is\ turned\ up.\r\n
comment15.params=card\ index
comment15.target=boolean\ canAddToPile(Card,\ int)
comment15.text=\r\n\ Checks\ whether\ the\ given\ card\ can\ be\ added\ to\ the\ pile\ at\ the\ given\ index.\r\n\ @param\ card\ a\ Card\r\n\ @param\ index\ an\ index\ into\ the\ piles\ array\r\n\ @postcondition\ true\ is\ returned\ if\ the\ card\ can\ be\ added\ (if\ the\ pile\ is\ empty,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ only\ a\ king\ can\ be\ added,\ otherwise,\ the\ suit\ must\ be\ opposite\ and\ the\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ given\ card\ must\ have\ a\ rank\ one\ less\ than\ the\ card\ on\ the\ pile),\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ false\ otherwise.\r\n\ @return\ true\ if\ the\ card\ can\ be\ added,\ false\ otherwise.\r\n
comment16.params=index
comment16.target=java.util.Stack\ removeFaceUpCards(int)
comment16.text=\r\n\ Removes\ the\ face\ up\ cards\ at\ the\ pile\ with\ the\ given\ index.\r\n\ @param\ index\ an\ index\ into\ the\ piles\ array.\r\n\ @postcondition\ the\ face\ up\ cards\ at\ the\ pile\ with\ the\ given\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index\ are\ returned\ as\ a\ stack\ of\ cards.\r\n
comment17.params=cards\ index
comment17.target=void\ addToPile(java.util.Stack,\ int)
comment17.text=\r\n\ Checks\ if\ the\ stack\ of\ Cards\ can\ be\ added\ to\ the\ pile\ with\ \r\n\ the\ given\ index.\r\n\ @param\ cards\ a\ Stack\ of\ Cards\r\n\ @param\ index\ an\ index\ into\ the\ piles\ array\r\n\ @postcondition\ true\ is\ returned\ if\ the\ stack\ of\ Cards\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ can\ be\ added\ to\ the\ pile\ with\ the\ given\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index,\ false\ otherwise.\r\n
comment18.params=card\ index
comment18.target=boolean\ canAddToFoundation(Card,\ int)
comment18.text=\r\n\ Checks\ if\ the\ given\ card\ can\ be\ added\ to\ the\ foundation\ at\ the\r\n\ given\ index.\r\n\ @param\ card\ a\ Card\r\n\ @param\ index\ an\ index\ into\ the\ foundations\ array.\r\n\ @postcondition\ returns\ true\ if\ the\ card\ can\ be\ added\ to\ the\ foundation\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ with\ the\ given\ index(can\ be\ added\ if\ the\ foundation\ is\ empty\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ and\ the\ card's\ rank\ is\ 1\ or\ if\ the\ foundation's\ top\ card\ has\ a\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ rank\ one\ lower\ than\ the\ given\ cards\ rank\ and\ they\ are\ the\ same\ suit.\r\n
comment2.params=
comment2.target=Card\ getStockCard()
comment2.text=\r\n\ Gets\ the\ card\ on\ top\ of\ the\ stack\ or\ null\ if\ there\r\n\ isn't\ one.\r\n\ @return\ the\ Card\ on\ top\ of\ the\ stack\ if\ there\ is\ one,\r\n\ \ \ \ \ \ \ \ \ null\ otherwise.\r\n
comment3.params=
comment3.target=Card\ getWasteCard()
comment3.text=\r\n\ Gets\ the\ card\ on\ top\ of\ the\ waste\ or\ null\ if\ there\r\n\ isn't\ one.\r\n\ @return\ the\ Card\ on\ top\ of\ the\ waste\ if\ there\ is\ one,\r\n\ \ \ \ \ \ \ \ \ null\ otherwise.\r\n
comment4.params=index
comment4.target=Card\ getFoundationCard(int)
comment4.text=\r\n\ Gets\ the\ card\ on\ top\ of\ the\ foundation\ or\ null\ if\ there\r\n\ isn't\ one.\r\n\ @param\ index\ an\ index\ into\ the\ foundation\ array\r\n\ @precondition\ index\ is\ valid\ (between\ 0\ and\ 3\ inclusive).\r\n\ @return\ the\ Card\ on\ top\ of\ the\ foundation\ if\ there\ is\ one,\r\n\ \ \ \ \ \ \ \ \ null\ otherwise.\r\n
comment5.params=index
comment5.target=java.util.Stack\ getPile(int)
comment5.text=\r\n\ Gets\ the\ pile\ at\ the\ given\ index.\r\n\ @param\ index\ an\ index\ into\ the\ piles\ array\r\n\ @precondition\ index\ is\ valid\ (between\ 0\ and\ 6\ inclusive).\r\n\ @return\ the\ pile\ at\ the\ given\ index.\r\n
comment6.params=
comment6.target=void\ createStock()
comment6.text=\r\n\ Creates\ a\ stock\ of\ cards.\r\n\ @postcondition\ a\ stock\ of\ cards\ is\ created.\r\n
comment7.params=
comment7.target=void\ deal()
comment7.text=\r\n\ Deals\ the\ cards\ onto\ the\ display.\r\n\ @postcondition\ all\ 52\ cards\ have\ been\ dealt\ onto\ the\ display.\r\n
comment8.params=
comment8.target=void\ dealThreeCards()
comment8.text=\r\n\ Deals\ three\ cards\ onto\ the\ waste.\r\n\ @postcondition\ three\ cards\ have\ been\ dealt.\r\n
comment9.params=
comment9.target=void\ resetStock()
comment9.text=\r\n\ Resets\ the\ stock\ of\ cards.\r\n\ @postcondition\ the\ cards\ from\ the\ waste\ have\ been\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ popped\ back\ onto\ the\ stock.\r\n
numComments=19
